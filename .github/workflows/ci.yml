# Raisket Mexican Fintech Platform - Continuous Integration
# Runs on every push and pull request to ensure code quality

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # ===========================================
  # CODE QUALITY & SECURITY
  # ===========================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          cd apps/backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: Lint backend
        run: |
          cd apps/backend
          npm run lint

      - name: Lint frontend
        run: |
          cd apps/frontend
          npm run lint

      - name: Type check backend
        run: |
          cd apps/backend
          npm run typecheck

      - name: Type check frontend
        run: |
          cd apps/frontend
          npm run typecheck

      - name: Security audit
        run: |
          npm audit --audit-level=moderate
          cd apps/backend && npm audit --audit-level=moderate
          cd ../frontend && npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: github.actor != 'dependabot[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ===========================================
  # BACKEND TESTS
  # ===========================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: raisket_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/backend
          npm ci --prefer-offline --no-audit

      - name: Setup test database
        run: |
          cd apps/backend
          PGPASSWORD=test_password psql -h localhost -U test_user -d raisket_test -f ../../database/schema.sql
        env:
          PGPASSWORD: test_password

      - name: Run unit tests
        run: |
          cd apps/backend
          npm run test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/raisket_test
          REDIS_URL: redis://localhost:6379/1

      - name: Run integration tests
        run: |
          cd apps/backend
          npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/raisket_test
          REDIS_URL: redis://localhost:6379/1

      - name: Generate coverage report
        run: |
          cd apps/backend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # ===========================================
  # FRONTEND TESTS
  # ===========================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/frontend
          npm ci --prefer-offline --no-audit

      - name: Run unit tests
        run: |
          cd apps/frontend
          npm run test

      - name: Run component tests
        run: |
          cd apps/frontend
          npm run test:components

      - name: Generate coverage report
        run: |
          cd apps/frontend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ===========================================
  # E2E TESTS
  # ===========================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: raisket_e2e
          POSTGRES_USER: e2e_user
          POSTGRES_PASSWORD: e2e_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          cd apps/backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: Setup E2E database
        run: |
          cd apps/backend
          PGPASSWORD=e2e_password psql -h localhost -U e2e_user -d raisket_e2e -f ../../database/schema.sql
          PGPASSWORD=e2e_password psql -h localhost -U e2e_user -d raisket_e2e -f ../../database/seeds/development/institutions.sql
        env:
          PGPASSWORD: e2e_password

      - name: Build applications
        run: |
          cd apps/backend && npm run build
          cd ../frontend && npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NODE_ENV: test

      - name: Start backend server
        run: |
          cd apps/backend
          npm run start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 8000
          DATABASE_URL: postgresql://e2e_user:e2e_password@localhost:5432/raisket_e2e
          REDIS_URL: redis://localhost:6379/2

      - name: Start frontend server
        run: |
          cd apps/frontend
          npm run start &
          sleep 15
        env:
          PORT: 3000
          NEXT_PUBLIC_API_URL: http://localhost:8000

      - name: Run E2E tests
        run: |
          npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:8000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            tests/e2e/results/
            tests/e2e/screenshots/
            tests/e2e/videos/

  # ===========================================
  # SECURITY SCANNING
  # ===========================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-results
          path: report_html.html

  # ===========================================
  # BUILD VALIDATION
  # ===========================================
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: Build backend
        run: |
          cd apps/backend
          npm run build

      - name: Build frontend
        run: |
          cd apps/frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: https://api.raisket.mx
          NODE_ENV: production

      - name: Validate Docker builds
        run: |
          docker build -f apps/backend/Dockerfile.prod -t raisket/backend:test apps/backend/
          docker build -f apps/frontend/Dockerfile.prod -t raisket/frontend:test apps/frontend/

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'raisket/backend:test'
          format: 'sarif'
          output: 'backend-scan.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'backend-scan.sarif'

  # ===========================================
  # DATABASE MIGRATION VALIDATION
  # ===========================================
  migration-validation:
    name: Database Migration Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: raisket_migration_test
          POSTGRES_USER: migration_user
          POSTGRES_PASSWORD: migration_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/backend
          npm ci --prefer-offline --no-audit

      - name: Run migration tests
        run: |
          cd apps/backend
          npm run migrate:test
        env:
          DATABASE_URL: postgresql://migration_user:migration_password@localhost:5432/raisket_migration_test

      - name: Validate schema integrity
        run: |
          cd database
          ./scripts/validate-schema.sh
        env:
          DATABASE_URL: postgresql://migration_user:migration_password@localhost:5432/raisket_migration_test

  # ===========================================
  # PERFORMANCE TESTS
  # ===========================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run API load tests
        run: |
          cd tests/load
          npm install
          npm run test:api
        env:
          API_URL: http://localhost:8000
          CONCURRENT_USERS: 50
          TEST_DURATION: 60s

  # ===========================================
  # NOTIFICATION
  # ===========================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests, e2e-tests, security-scan, build-validation]
    if: always()

    steps:
      - name: Notify Slack on Success
        if: needs.code-quality.result == 'success' && needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ All CI checks passed! Ready for deployment.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ CI checks failed. Please review the errors.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}